apply plugin: 'com.android.application'

static def releaseTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.anber.multimediaexample"
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        ndk {
            abiFilters "armeabi-v7a"  // 指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,armeabi,arm-v8之类的so会被过滤掉)
        }
        flavorDimensions "versionCode"
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('keystores/toolkit.jks')
            storePassword 'toolkit'
            keyAlias = 'toolkit'
            keyPassword 'toolkit'
        }
        release {
            keyAlias 'toolkit'
            keyPassword 'toolkit'
            storeFile file('keystores/toolkit.jks')
            storePassword 'toolkit'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            zipAlignEnabled false
            // true - 打开混淆
            minifyEnabled false
            // true - 打开资源压缩
            shrinkResources false
            // 用于设置Proguard的规划路径；
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            // true - 打开混淆
            minifyEnabled false
            // true - 打开资源压缩
            shrinkResources false
            // 用于设置Proguard的规划路径；
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "Toolkit-${variant.versionName}-${releaseTime()}(${variant.versionCode}).apk"
        }
    }

    //统一资源前缀，规范资源引用
    resourcePrefix "toolkit_"

    buildFeatures{
        dataBinding = true
// for view binding :
// viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    implementation rootProject.ext.dependencies.eventbus
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
//        api project(':module-rtmp')
        api project(':module-webrtc')
        //身份验证模块
        api project(':module-work')
        //应用模块
        api project(':sdk-voicechange')
        //用户模块
        api project(':sdk-openglrecord')
        //更新版本模块
        api project(':sdk-player')
//        //播放模块
        api project(":library-base")
//        //推流模块
//        api project(":module-push")
//        //短视频模块
//        api project(":module-shortvideo")
        //上传频模块
//        api project(":module-upload")
    }
}